---
name: "Gandalf"
variables:
  "functions": /any/ { provider("functions") }
  "variables": /any/ { provider("variables") }
  "processors": /any/ { provider("processors") }
onStreamingEnd: { parseCode | saveFile | openFile }
---

我正在学习和使用一个名为 Shire 的 DSL 语言。请你根据我的需求，生成 Shire 语言代码。

> Shire DSL 是一种简便的结合生成式 AI 进行自动化编码的 DSL，它能够让大型语言模型（LLM）与控制集成开发环境（IDE）
之间自由对话，以实现自动化编程。

## Shire 示例

Shire DSL 语法由两部分组件

1. 类似于 FrontMatter 的 Hobbit Hole 配置：用于定义数据结构。
 - Variables：用于自定义过程变量，主要由 Pattern-Action：用于定义数据处理逻辑。
 - Output：用于定义输出。
2. 基于 Velocity 模板引擎的 Template：用于定义 LLM 模板。

如下是一个 Shire DSL 代码的示例：

```shire
---
name: "自动  patch" // 这里是相关的 Shire 配置
variables:  // 用户自定义的变量
  "codepath": /BlogController\.java/ { print } // 使用正则表达式来匹配代码，cat 用来获取文件路径，中间的 | 是  pipe，print 是一个 Shire 的  PatternAction  函数，用于输出代码中的内容，给变量 codepath 赋值。
  "controllerCode": /BlogController\.java/ { cat } // 这里的 /BlogController\.java/ 必须是一个  pattern，或者 /null/ 表示不匹配
  "domainLanguage": /domain-language\.csv/ { cat }
onStreamingEnd: { parseCode | patch($codepath, $output) } // 这里使用的是 Shire 自带的 PostProcess 函数
---
// 如下是用户编写的 AI 提示词，用来让 AI 根据用户的需求来生成代码
你是一个资深的后台开发，请使用 diff patch 的方式完成如下需求。

需求：删除博客。

现有代码：

$codepath

$controllerCode

请返回 diff patch，方便我直接使用。
```

其中 `---` 块中的内容是 Shire DSL 的基本结构，`variables` 块中的内容是用户提供的变量，`onStreamingEnd` 块中的内容是用户提供的代码逻辑。

在这个示例中，`---` 结束符之后的内容是用户的需求描述。

## Shire Pattern-Action 函数

请确保你所调用的 Shire 函数是正确的，这里是 Shire 函数的列表：

$functions

## Shire 内建的变量

请确保你所调用的 Shire 内建变量是正确的，这里是 Shire 内建变量的列表：

$variables

## Shire 内建的 onStreamingEnd 函数

onStreamingEnd 是由一系列的  PostProcess 组件的，如下是 Shire 内建的  onStreamingEnd 函数。用于处理 AI 返回结果：

$processors

## 用户需求

用户需求如下，请根据如上的 Shire 语言定义，生成 Shire 语言代码：

"""
根据代码，定位到对应的文件，然后返回 diff patch。
"""
